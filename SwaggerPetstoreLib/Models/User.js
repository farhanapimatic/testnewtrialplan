/**
 * SwaggerPetstoreLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of User
 *
 * @constructor
 */
angular.module('SwaggerPetstoreLib')
    .factory('User', ['BaseModel', UserModel]);

    function UserModel(BaseModel) {
        var User = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.id = this.getValue(obj.id);
            this.username = this.getValue(obj.username);
            this.firstName = this.getValue(obj.firstName);
            this.lastName = this.getValue(obj.lastName);
            this.email = this.getValue(obj.email);
            this.password = this.getValue(obj.password);
            this.phone = this.getValue(obj.phone);
            this.userStatus = this.getValue(obj.userStatus);
        };

        User.prototype = new BaseModel();
        User.prototype.constructor = User;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        User.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'id', realName: 'id' },
                { name: 'username', realName: 'username' },
                { name: 'firstName', realName: 'firstName' },
                { name: 'lastName', realName: 'lastName' },
                { name: 'email', realName: 'email' },
                { name: 'password', realName: 'password' },
                { name: 'phone', realName: 'phone' },
                { name: 'userStatus', realName: 'userStatus' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        User.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {long|null}
         */
        User.prototype.getId = function () {
            return this.id;
        };
    
        /**
         * Setter for Id
         * 
         * @param {long|null} value 
         */
        User.prototype.setId = function (value) {
            this.id = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        User.prototype.getUsername = function () {
            return this.username;
        };
    
        /**
         * Setter for Username
         * 
         * @param {string|null} value 
         */
        User.prototype.setUsername = function (value) {
            this.username = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        User.prototype.getFirstName = function () {
            return this.firstName;
        };
    
        /**
         * Setter for FirstName
         * 
         * @param {string|null} value 
         */
        User.prototype.setFirstName = function (value) {
            this.firstName = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        User.prototype.getLastName = function () {
            return this.lastName;
        };
    
        /**
         * Setter for LastName
         * 
         * @param {string|null} value 
         */
        User.prototype.setLastName = function (value) {
            this.lastName = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        User.prototype.getEmail = function () {
            return this.email;
        };
    
        /**
         * Setter for Email
         * 
         * @param {string|null} value 
         */
        User.prototype.setEmail = function (value) {
            this.email = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        User.prototype.getPassword = function () {
            return this.password;
        };
    
        /**
         * Setter for Password
         * 
         * @param {string|null} value 
         */
        User.prototype.setPassword = function (value) {
            this.password = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        User.prototype.getPhone = function () {
            return this.phone;
        };
    
        /**
         * Setter for Phone
         * 
         * @param {string|null} value 
         */
        User.prototype.setPhone = function (value) {
            this.phone = value;
        };
    
        /**
         * User Status
         *
         * @return {int|null}
         */
        User.prototype.getUserStatus = function () {
            return this.userStatus;
        };
    
        /**
         * Setter for UserStatus
         * 
         * @param {int|null} value 
         */
        User.prototype.setUserStatus = function (value) {
            this.userStatus = value;
        };
    
        return User;
    }

}(angular));
