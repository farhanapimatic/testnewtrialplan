/**
 * SwaggerPetstoreLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Order
 *
 * @constructor
 */
angular.module('SwaggerPetstoreLib')
    .factory('Order', ['BaseModel', OrderModel]);

    function OrderModel(BaseModel) {
        var Order = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.id = this.getValue(obj.id);
            this.petId = this.getValue(obj.petId);
            this.quantity = this.getValue(obj.quantity);
            this.shipDate = this.getValue(obj.shipDate);
            this.status = this.getValue(obj.status);
            this.complete = this.getValue(obj.complete, false);
        };

        Order.prototype = new BaseModel();
        Order.prototype.constructor = Order;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        Order.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'id', realName: 'id' },
                { name: 'petId', realName: 'petId' },
                { name: 'quantity', realName: 'quantity' },
                { name: 'shipDate', realName: 'shipDate', isDateTime: true, dateTimeValue: 'rfc3339' },
                { name: 'status', realName: 'status' },
                { name: 'complete', realName: 'complete' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        Order.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {long|null}
         */
        Order.prototype.getId = function () {
            return this.id;
        };
    
        /**
         * Setter for Id
         * 
         * @param {long|null} value 
         */
        Order.prototype.setId = function (value) {
            this.id = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {long|null}
         */
        Order.prototype.getPetId = function () {
            return this.petId;
        };
    
        /**
         * Setter for PetId
         * 
         * @param {long|null} value 
         */
        Order.prototype.setPetId = function (value) {
            this.petId = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {int|null}
         */
        Order.prototype.getQuantity = function () {
            return this.quantity;
        };
    
        /**
         * Setter for Quantity
         * 
         * @param {int|null} value 
         */
        Order.prototype.setQuantity = function (value) {
            this.quantity = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {DateTime|null}
         */
        Order.prototype.getShipDate = function () {
            return this.shipDate;
        };
    
        /**
         * Setter for ShipDate
         * 
         * @param {DateTime|null} value 
         */
        Order.prototype.setShipDate = function (value) {
            this.shipDate = value;
        };
    
        /**
         * Order Status
         *
         * @return {StatusEnum|null}
         */
        Order.prototype.getStatus = function () {
            return this.status;
        };
    
        /**
         * Setter for Status
         * 
         * @param {StatusEnum|null} value 
         */
        Order.prototype.setStatus = function (value) {
            this.status = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {bool|null}
         */
        Order.prototype.getComplete = function () {
            return this.complete;
        };
    
        /**
         * Setter for Complete
         * 
         * @param {bool|null} value 
         */
        Order.prototype.setComplete = function (value) {
            this.complete = value;
        };
    
        return Order;
    }

}(angular));
