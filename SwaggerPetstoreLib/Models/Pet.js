/**
 * SwaggerPetstoreLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Pet
 *
 * @constructor
 */
angular.module('SwaggerPetstoreLib')
    .factory('Pet', ['BaseModel', PetModel]);

    function PetModel(BaseModel) {
        var Pet = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.id = this.getValue(obj.id);
            this.category = this.getValue(obj.category);
            this.name = this.getValue(obj.name);
            this.photoUrls = this.getValue(obj.photoUrls);
            this.tags = this.getValue(obj.tags);
            this.status = this.getValue(obj.status);
        };

        Pet.prototype = new BaseModel();
        Pet.prototype.constructor = Pet;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        Pet.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'id', realName: 'id' },
                { name: 'category', realName: 'category', type: 'Category' },
                { name: 'name', realName: 'name' },
                { name: 'photoUrls', realName: 'photoUrls', array: true },
                { name: 'tags', realName: 'tags', array: true, type: 'Tag' },
                { name: 'status', realName: 'status' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        Pet.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {long|null}
         */
        Pet.prototype.getId = function () {
            return this.id;
        };
    
        /**
         * Setter for Id
         * 
         * @param {long|null} value 
         */
        Pet.prototype.setId = function (value) {
            this.id = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {Category|null}
         */
        Pet.prototype.getCategory = function () {
            return this.category;
        };
    
        /**
         * Setter for Category
         * 
         * @param {Category|null} value 
         */
        Pet.prototype.setCategory = function (value) {
            this.category = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string}
         */
        Pet.prototype.getName = function () {
            return this.name;
        };
    
        /**
         * Setter for Name
         * 
         * @param {string} value 
         */
        Pet.prototype.setName = function (value) {
            this.name = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {array}
         */
        Pet.prototype.getPhotoUrls = function () {
            return this.photoUrls;
        };
    
        /**
         * Setter for PhotoUrls
         * 
         * @param {array} value 
         */
        Pet.prototype.setPhotoUrls = function (value) {
            this.photoUrls = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {array|null}
         */
        Pet.prototype.getTags = function () {
            return this.tags;
        };
    
        /**
         * Setter for Tags
         * 
         * @param {array|null} value 
         */
        Pet.prototype.setTags = function (value) {
            this.tags = value;
        };
    
        /**
         * pet status in the store
         *
         * @return {Status1Enum|null}
         */
        Pet.prototype.getStatus = function () {
            return this.status;
        };
    
        /**
         * Setter for Status
         * 
         * @param {Status1Enum|null} value 
         */
        Pet.prototype.setStatus = function (value) {
            this.status = value;
        };
    
        return Pet;
    }

}(angular));
