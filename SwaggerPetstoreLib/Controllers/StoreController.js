/**
 * SwaggerPetstoreLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

angular.module('SwaggerPetstoreLib')
    .factory('StoreController', ['$q',
        'Configuration',
        'Servers',
        'HttpClient',
        'APIHelper',
        'BaseController',
        'OAuthManager',
        StoreController
    ]);

    function StoreController($q, Configuration, Servers, HttpClient, APIHelper, BaseController, OAuthManager) {
        return {
            /**
             * Returns a map of status codes to quantities
             *
             *
             * @return {promise<Number>}
             */
            getInventory: function () {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.getBaseUri();
                var _queryBuilder = _baseUri + '/store/inventory';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {};
                var oauthTokenPromise = OAuthManager.isTokenRetrievedAndSet();
                oauthTokenPromise.then(function(resolve) {
                    _headers.Authorization = 'Bearer ' + Configuration.oAuthToken.accessToken;
                }, function(reject) {
                    var errorModel = OAuthManager.getInvalidClientError();
                    _deffered.reject(errorModel);
                });
                
                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'GET',
                    queryUrl: _queryUrl,
                    headers: _headers,
                };
                
                oauthTokenPromise.then(function(success) {
                    var _response = new HttpClient(_config);
                    
                    //process response
                    _response.then(function success(_result) {
                        var _strResult =_result.body;
                        _result.body = JSON.parse(_strResult);
                        _deffered.resolve(_result);
                    }, function error(_result){
                        // Error handling for custom HTTP status codes
                        _deffered.reject(APIHelper.appendContext({
                            errorMessage:'HTTP Response Not OK',
                            errorCode: _result.code,
                            errorResponse: _result.message
                        }, _result.getContext()));
                    });
                }, function(err) {
                    var errorModel = OAuthManager.getInvalidClientError();
                    _deffered.reject(errorModel);
                });
                
                return _deffered.promise;
            },
            /**
             * Place an order for a pet
             *
             * @param {Order} body order placed for purchasing the pet
             *
             * @return {promise<Order>}
             */
            createPlaceOrder: function (body) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.getBaseUri();
                var _queryBuilder = _baseUri + '/store/order';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {
                    'accept': 'application/json',
                    'content-type': 'application/json; charset=utf-8'
                };

                // Remove null values
                APIHelper.cleanObject(body);

                var oauthTokenPromise = OAuthManager.isTokenRetrievedAndSet();
                oauthTokenPromise.then(function(resolve) {
                    _headers.Authorization = 'Bearer ' + Configuration.oAuthToken.accessToken;
                }, function(reject) {
                    var errorModel = OAuthManager.getInvalidClientError();
                    _deffered.reject(errorModel);
                });
                
                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    headers: _headers,
                    body: body.toJSON()
                };
                
                oauthTokenPromise.then(function(success) {
                    var _response = new HttpClient(_config);
                    
                    //process response
                    _response.then(function success(_result) {
                        var parsed = _result.body;
                        parsed = BaseController.getObjectMapper().mapObject(parsed, 'Order');
                        _result.body = parsed;
                        _deffered.resolve(_result);
                    }, function error(_result){
                        // Error handling for custom HTTP status codes
                        if (_result.code === 400) {
                            _deffered.reject(APIHelper.appendContext({
                                errorMessage:'Invalid Order',
                                errorCode: 400,
                                errorResponse: _result.message
                            }, _result.getContext()));
                        } else {
                            _deffered.reject(APIHelper.appendContext({
                                errorMessage:'HTTP Response Not OK',
                                errorCode: _result.code,
                                errorResponse: _result.message
                            }, _result.getContext()));
                        }
                    });
                }, function(err) {
                    var errorModel = OAuthManager.getInvalidClientError();
                    _deffered.reject(errorModel);
                });
                
                return _deffered.promise;
            },
            /**
             * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
             *
             * @param {long} orderId ID of pet that needs to be fetched
             *
             * @return {promise<Order>}
             */
            getOrderById: function (orderId) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.getBaseUri();
                var _queryBuilder = _baseUri + '/store/order/{orderId}';
                
                // Process template parameters
                _queryBuilder = APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
                    'orderId': orderId
                });

                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {
                    'accept': 'application/json'
                };

                var oauthTokenPromise = OAuthManager.isTokenRetrievedAndSet();
                oauthTokenPromise.then(function(resolve) {
                    _headers.Authorization = 'Bearer ' + Configuration.oAuthToken.accessToken;
                }, function(reject) {
                    var errorModel = OAuthManager.getInvalidClientError();
                    _deffered.reject(errorModel);
                });
                
                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'GET',
                    queryUrl: _queryUrl,
                    headers: _headers,
                };
                
                oauthTokenPromise.then(function(success) {
                    var _response = new HttpClient(_config);
                    
                    //process response
                    _response.then(function success(_result) {
                        var parsed = _result.body;
                        parsed = BaseController.getObjectMapper().mapObject(parsed, 'Order');
                        _result.body = parsed;
                        _deffered.resolve(_result);
                    }, function error(_result){
                        // Error handling for custom HTTP status codes
                        if (_result.code === 400) {
                            _deffered.reject(APIHelper.appendContext({
                                errorMessage:'Invalid ID supplied',
                                errorCode: 400,
                                errorResponse: _result.message
                            }, _result.getContext()));
                        } else if (_result.code === 404) {
                            _deffered.reject(APIHelper.appendContext({
                                errorMessage:'Order not found',
                                errorCode: 404,
                                errorResponse: _result.message
                            }, _result.getContext()));
                        } else {
                            _deffered.reject(APIHelper.appendContext({
                                errorMessage:'HTTP Response Not OK',
                                errorCode: _result.code,
                                errorResponse: _result.message
                            }, _result.getContext()));
                        }
                    });
                }, function(err) {
                    var errorModel = OAuthManager.getInvalidClientError();
                    _deffered.reject(errorModel);
                });
                
                return _deffered.promise;
            },
            /**
             * For valid response try integer IDs with positive integer value. Negative or non-integer values will
             * generate API errors
             *
             * @param {long} orderId ID of the order that needs to be deleted
             *
             * @return {promise<Void>}
             */
            deleteOrder: function (orderId) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.getBaseUri();
                var _queryBuilder = _baseUri + '/store/order/{orderId}';
                
                // Process template parameters
                _queryBuilder = APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
                    'orderId': orderId
                });

                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {};
                var oauthTokenPromise = OAuthManager.isTokenRetrievedAndSet();
                oauthTokenPromise.then(function(resolve) {
                    _headers.Authorization = 'Bearer ' + Configuration.oAuthToken.accessToken;
                }, function(reject) {
                    var errorModel = OAuthManager.getInvalidClientError();
                    _deffered.reject(errorModel);
                });
                
                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'DELETE',
                    queryUrl: _queryUrl,
                    headers: _headers,
                };
                
                oauthTokenPromise.then(function(success) {
                    var _response = new HttpClient(_config);
                    
                    //process response
                    _response.then(function success(_result) {
                        _deffered.resolve(_result);
                    }, function error(_result){
                        // Error handling for custom HTTP status codes
                        if (_result.code === 400) {
                            _deffered.reject(APIHelper.appendContext({
                                errorMessage:'Invalid ID supplied',
                                errorCode: 400,
                                errorResponse: _result.message
                            }, _result.getContext()));
                        } else if (_result.code === 404) {
                            _deffered.reject(APIHelper.appendContext({
                                errorMessage:'Order not found',
                                errorCode: 404,
                                errorResponse: _result.message
                            }, _result.getContext()));
                        } else {
                            _deffered.reject(APIHelper.appendContext({
                                errorMessage:'HTTP Response Not OK',
                                errorCode: _result.code,
                                errorResponse: _result.message
                            }, _result.getContext()));
                        }
                    });
                }, function(err) {
                    var errorModel = OAuthManager.getInvalidClientError();
                    _deffered.reject(errorModel);
                });
                
                return _deffered.promise;
            }
        };
    }

}(angular));
