/**
 * SwaggerPetstoreLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

angular.module('SwaggerPetstoreLib')
    .factory('UserController', ['$q',
        'Configuration',
        'Servers',
        'HttpClient',
        'APIHelper',
        'BaseController',
        'OAuthManager',
        UserController
    ]);

    function UserController($q, Configuration, Servers, HttpClient, APIHelper, BaseController, OAuthManager) {
        return {
            /**
             * This can only be done by the logged in user.
             *
             * @param {User} body Created user object
             *
             * @return {promise<Void>}
             */
            createUser: function (body) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.getBaseUri();
                var _queryBuilder = _baseUri + '/user';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {
                    'content-type': 'application/json; charset=utf-8'
                };

                // Remove null values
                APIHelper.cleanObject(body);

                var oauthTokenPromise = OAuthManager.isTokenRetrievedAndSet();
                oauthTokenPromise.then(function(resolve) {
                    _headers.Authorization = 'Bearer ' + Configuration.oAuthToken.accessToken;
                }, function(reject) {
                    var errorModel = OAuthManager.getInvalidClientError();
                    _deffered.reject(errorModel);
                });
                
                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    headers: _headers,
                    body: body.toJSON()
                };
                
                oauthTokenPromise.then(function(success) {
                    var _response = new HttpClient(_config);
                    
                    //process response
                    _response.then(function success(_result) {
                        _deffered.resolve(_result);
                    }, function error(_result){
                        // Error handling for custom HTTP status codes
                         else {
                            _deffered.reject(APIHelper.appendContext({
                                errorMessage:'HTTP Response Not OK',
                                errorCode: _result.code,
                                errorResponse: _result.message
                            }, _result.getContext()));
                        }
                    });
                }, function(err) {
                    var errorModel = OAuthManager.getInvalidClientError();
                    _deffered.reject(errorModel);
                });
                
                return _deffered.promise;
            },
            /**
             * Creates list of users with given input array
             *
             * @param {array} body List of user object
             *
             * @return {promise<Void>}
             */
            createUsersWithArrayInput: function (body) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.getBaseUri();
                var _queryBuilder = _baseUri + '/user/createWithArray';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {
                    'content-type': 'application/json; charset=utf-8'
                };

                // Remove null values
                APIHelper.cleanObject(body);

                var oauthTokenPromise = OAuthManager.isTokenRetrievedAndSet();
                oauthTokenPromise.then(function(resolve) {
                    _headers.Authorization = 'Bearer ' + Configuration.oAuthToken.accessToken;
                }, function(reject) {
                    var errorModel = OAuthManager.getInvalidClientError();
                    _deffered.reject(errorModel);
                });
                
                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    headers: _headers,
                    body: body.map(function(obj) { return obj.toJSON(); })
                };
                
                oauthTokenPromise.then(function(success) {
                    var _response = new HttpClient(_config);
                    
                    //process response
                    _response.then(function success(_result) {
                        _deffered.resolve(_result);
                    }, function error(_result){
                        // Error handling for custom HTTP status codes
                         else {
                            _deffered.reject(APIHelper.appendContext({
                                errorMessage:'HTTP Response Not OK',
                                errorCode: _result.code,
                                errorResponse: _result.message
                            }, _result.getContext()));
                        }
                    });
                }, function(err) {
                    var errorModel = OAuthManager.getInvalidClientError();
                    _deffered.reject(errorModel);
                });
                
                return _deffered.promise;
            },
            /**
             * Creates list of users with given input array
             *
             * @param {array} body List of user object
             *
             * @return {promise<Void>}
             */
            createUsersWithListInput: function (body) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.getBaseUri();
                var _queryBuilder = _baseUri + '/user/createWithList';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {
                    'content-type': 'application/json; charset=utf-8'
                };

                // Remove null values
                APIHelper.cleanObject(body);

                var oauthTokenPromise = OAuthManager.isTokenRetrievedAndSet();
                oauthTokenPromise.then(function(resolve) {
                    _headers.Authorization = 'Bearer ' + Configuration.oAuthToken.accessToken;
                }, function(reject) {
                    var errorModel = OAuthManager.getInvalidClientError();
                    _deffered.reject(errorModel);
                });
                
                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    headers: _headers,
                    body: body.map(function(obj) { return obj.toJSON(); })
                };
                
                oauthTokenPromise.then(function(success) {
                    var _response = new HttpClient(_config);
                    
                    //process response
                    _response.then(function success(_result) {
                        _deffered.resolve(_result);
                    }, function error(_result){
                        // Error handling for custom HTTP status codes
                         else {
                            _deffered.reject(APIHelper.appendContext({
                                errorMessage:'HTTP Response Not OK',
                                errorCode: _result.code,
                                errorResponse: _result.message
                            }, _result.getContext()));
                        }
                    });
                }, function(err) {
                    var errorModel = OAuthManager.getInvalidClientError();
                    _deffered.reject(errorModel);
                });
                
                return _deffered.promise;
            },
            /**
             * Logs user into the system
             *
             * @param {string} username The user name for login
             * @param {string} password The password for login in clear text
             *
             * @return {promise<String>}
             */
            getLoginUser: function (username, password) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.getBaseUri();
                var _queryBuilder = _baseUri + '/user/login';
                
                // Process query parameters
                _queryBuilder = APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
                    'username': username,
                    'password': password
                });

                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {};
                var oauthTokenPromise = OAuthManager.isTokenRetrievedAndSet();
                oauthTokenPromise.then(function(resolve) {
                    _headers.Authorization = 'Bearer ' + Configuration.oAuthToken.accessToken;
                }, function(reject) {
                    var errorModel = OAuthManager.getInvalidClientError();
                    _deffered.reject(errorModel);
                });
                
                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'GET',
                    queryUrl: _queryUrl,
                    headers: _headers,
                };
                
                oauthTokenPromise.then(function(success) {
                    var _response = new HttpClient(_config);
                    
                    //process response
                    _response.then(function success(_result) {
                        _deffered.resolve(_result);
                    }, function error(_result){
                        // Error handling for custom HTTP status codes
                        if (_result.code === 400) {
                            _deffered.reject(APIHelper.appendContext({
                                errorMessage:'Invalid username/password supplied',
                                errorCode: 400,
                                errorResponse: _result.message
                            }, _result.getContext()));
                        } else {
                            _deffered.reject(APIHelper.appendContext({
                                errorMessage:'HTTP Response Not OK',
                                errorCode: _result.code,
                                errorResponse: _result.message
                            }, _result.getContext()));
                        }
                    });
                }, function(err) {
                    var errorModel = OAuthManager.getInvalidClientError();
                    _deffered.reject(errorModel);
                });
                
                return _deffered.promise;
            },
            /**
             * Logs out current logged in user session
             *
             *
             * @return {promise<Void>}
             */
            getLogoutUser: function () {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.getBaseUri();
                var _queryBuilder = _baseUri + '/user/logout';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {};
                var oauthTokenPromise = OAuthManager.isTokenRetrievedAndSet();
                oauthTokenPromise.then(function(resolve) {
                    _headers.Authorization = 'Bearer ' + Configuration.oAuthToken.accessToken;
                }, function(reject) {
                    var errorModel = OAuthManager.getInvalidClientError();
                    _deffered.reject(errorModel);
                });
                
                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'GET',
                    queryUrl: _queryUrl,
                    headers: _headers,
                };
                
                oauthTokenPromise.then(function(success) {
                    var _response = new HttpClient(_config);
                    
                    //process response
                    _response.then(function success(_result) {
                        _deffered.resolve(_result);
                    }, function error(_result){
                        // Error handling for custom HTTP status codes
                         else {
                            _deffered.reject(APIHelper.appendContext({
                                errorMessage:'HTTP Response Not OK',
                                errorCode: _result.code,
                                errorResponse: _result.message
                            }, _result.getContext()));
                        }
                    });
                }, function(err) {
                    var errorModel = OAuthManager.getInvalidClientError();
                    _deffered.reject(errorModel);
                });
                
                return _deffered.promise;
            },
            /**
             * Get user by user name
             *
             * @param {string} username The name that needs to be fetched. Use user1 for testing.
             *
             * @return {promise<User>}
             */
            getUserByName: function (username) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.getBaseUri();
                var _queryBuilder = _baseUri + '/user/{username}';
                
                // Process template parameters
                _queryBuilder = APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
                    'username': username
                });

                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {
                    'accept': 'application/json'
                };

                var oauthTokenPromise = OAuthManager.isTokenRetrievedAndSet();
                oauthTokenPromise.then(function(resolve) {
                    _headers.Authorization = 'Bearer ' + Configuration.oAuthToken.accessToken;
                }, function(reject) {
                    var errorModel = OAuthManager.getInvalidClientError();
                    _deffered.reject(errorModel);
                });
                
                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'GET',
                    queryUrl: _queryUrl,
                    headers: _headers,
                };
                
                oauthTokenPromise.then(function(success) {
                    var _response = new HttpClient(_config);
                    
                    //process response
                    _response.then(function success(_result) {
                        var parsed = _result.body;
                        parsed = BaseController.getObjectMapper().mapObject(parsed, 'User');
                        _result.body = parsed;
                        _deffered.resolve(_result);
                    }, function error(_result){
                        // Error handling for custom HTTP status codes
                        if (_result.code === 400) {
                            _deffered.reject(APIHelper.appendContext({
                                errorMessage:'Invalid username supplied',
                                errorCode: 400,
                                errorResponse: _result.message
                            }, _result.getContext()));
                        } else if (_result.code === 404) {
                            _deffered.reject(APIHelper.appendContext({
                                errorMessage:'User not found',
                                errorCode: 404,
                                errorResponse: _result.message
                            }, _result.getContext()));
                        } else {
                            _deffered.reject(APIHelper.appendContext({
                                errorMessage:'HTTP Response Not OK',
                                errorCode: _result.code,
                                errorResponse: _result.message
                            }, _result.getContext()));
                        }
                    });
                }, function(err) {
                    var errorModel = OAuthManager.getInvalidClientError();
                    _deffered.reject(errorModel);
                });
                
                return _deffered.promise;
            },
            /**
             * This can only be done by the logged in user.
             *
             * @param {string} username name that need to be updated
             * @param {User} body Updated user object
             *
             * @return {promise<Void>}
             */
            updateUser: function (username, body) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.getBaseUri();
                var _queryBuilder = _baseUri + '/user/{username}';
                
                // Process template parameters
                _queryBuilder = APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
                    'username': username
                });

                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {
                    'content-type': 'application/json; charset=utf-8'
                };

                // Remove null values
                APIHelper.cleanObject(body);

                var oauthTokenPromise = OAuthManager.isTokenRetrievedAndSet();
                oauthTokenPromise.then(function(resolve) {
                    _headers.Authorization = 'Bearer ' + Configuration.oAuthToken.accessToken;
                }, function(reject) {
                    var errorModel = OAuthManager.getInvalidClientError();
                    _deffered.reject(errorModel);
                });
                
                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'PUT',
                    queryUrl: _queryUrl,
                    headers: _headers,
                    body: body.toJSON()
                };
                
                oauthTokenPromise.then(function(success) {
                    var _response = new HttpClient(_config);
                    
                    //process response
                    _response.then(function success(_result) {
                        _deffered.resolve(_result);
                    }, function error(_result){
                        // Error handling for custom HTTP status codes
                        if (_result.code === 400) {
                            _deffered.reject(APIHelper.appendContext({
                                errorMessage:'Invalid user supplied',
                                errorCode: 400,
                                errorResponse: _result.message
                            }, _result.getContext()));
                        } else if (_result.code === 404) {
                            _deffered.reject(APIHelper.appendContext({
                                errorMessage:'User not found',
                                errorCode: 404,
                                errorResponse: _result.message
                            }, _result.getContext()));
                        } else {
                            _deffered.reject(APIHelper.appendContext({
                                errorMessage:'HTTP Response Not OK',
                                errorCode: _result.code,
                                errorResponse: _result.message
                            }, _result.getContext()));
                        }
                    });
                }, function(err) {
                    var errorModel = OAuthManager.getInvalidClientError();
                    _deffered.reject(errorModel);
                });
                
                return _deffered.promise;
            },
            /**
             * This can only be done by the logged in user.
             *
             * @param {string} username The name that needs to be deleted
             *
             * @return {promise<Void>}
             */
            deleteUser: function (username) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.getBaseUri();
                var _queryBuilder = _baseUri + '/user/{username}';
                
                // Process template parameters
                _queryBuilder = APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
                    'username': username
                });

                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare headers
                var _headers = {};
                var oauthTokenPromise = OAuthManager.isTokenRetrievedAndSet();
                oauthTokenPromise.then(function(resolve) {
                    _headers.Authorization = 'Bearer ' + Configuration.oAuthToken.accessToken;
                }, function(reject) {
                    var errorModel = OAuthManager.getInvalidClientError();
                    _deffered.reject(errorModel);
                });
                
                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'DELETE',
                    queryUrl: _queryUrl,
                    headers: _headers,
                };
                
                oauthTokenPromise.then(function(success) {
                    var _response = new HttpClient(_config);
                    
                    //process response
                    _response.then(function success(_result) {
                        _deffered.resolve(_result);
                    }, function error(_result){
                        // Error handling for custom HTTP status codes
                        if (_result.code === 400) {
                            _deffered.reject(APIHelper.appendContext({
                                errorMessage:'Invalid username supplied',
                                errorCode: 400,
                                errorResponse: _result.message
                            }, _result.getContext()));
                        } else if (_result.code === 404) {
                            _deffered.reject(APIHelper.appendContext({
                                errorMessage:'User not found',
                                errorCode: 404,
                                errorResponse: _result.message
                            }, _result.getContext()));
                        } else {
                            _deffered.reject(APIHelper.appendContext({
                                errorMessage:'HTTP Response Not OK',
                                errorCode: _result.code,
                                errorResponse: _result.message
                            }, _result.getContext()));
                        }
                    });
                }, function(err) {
                    var errorModel = OAuthManager.getInvalidClientError();
                    _deffered.reject(errorModel);
                });
                
                return _deffered.promise;
            }
        };
    }

}(angular));
